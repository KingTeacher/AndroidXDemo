apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
        resConfigs "hdpi",'en', 'zh-rCN'
    }
    signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file("my-release-key.jks")
            storePassword "password"
            keyAlias "my-alias"
            keyPassword "password"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true //打开混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"//在applicationId后增加该字段用于区分
            versionNameSuffix "-debug"
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_ENV", "\"http://www.baidu.com\"" //自定义 String 值
            buildConfigField "Boolean", "openLog", "true" //自定义 boolean 值
            buildConfigField "int", "age", "10"   //自定义 int 值
        }

        /**
         * 使用“initWith”属性可以复制其他构建类型的配置，然后仅配置要更改的设置。这一个复制调试版本 ,然后更改清单的占位符和应用程序ID。
         */
        staging {
            initWith debug
            manifestPlaceholders = [hostName:"internal.example.com"]
//            applicationIdSuffix ".debugStaging"
        }


    }
//1.
//    flavorDimensions "version"
//    productFlavors {
//        demo {
//            // 将此产品风味分配给“版本”风味尺寸。
//            // 如果仅使用一个维度，则此属性为可选，并且插件会自动将模块的所有样式分配给该维度。
//            dimension "version"
//            applicationIdSuffix ".demo"
//            versionNameSuffix "-demo"
//        }
//        full {
//            dimension "version"
//            applicationIdSuffix ".full"
//            versionNameSuffix "-full"
//        }
//    }
    //2.
    flavorDimensions "api", "mode"

//    productFlavors {
//        demo {
//            // Assigns this product flavor to the "mode" flavor dimension.
//            dimension "mode"
//        }
//
//        full {
//            dimension "mode"
//        }
//
//        // Configurations in the "api" product flavors override those in "mode"
//        // flavors and the defaultConfig block. Gradle determines the priority
//        // between flavor dimensions based on the order in which they appear next
//        // to the flavorDimensions property above--the first dimension has a higher
//        // priority than the second, and so on.
//        minApi24 {
//            dimension "api"
//            minSdkVersion 24
//            // To ensure the target device receives the version of the app with
//            // the highest compatible API level, assign version codes in increasing
//            // value with API level. To learn more about assigning version codes to
//            // support app updates and uploading to Google Play, read Multiple APK Support
//            versionCode 30000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi24"
//        }
//
//        minApi23 {
//            dimension "api"
//            minSdkVersion 23
//            versionCode 20000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi23"
//        }
//
//        minApi21 {
//            dimension "api"
//            minSdkVersion 21
//            versionCode 10000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi21"
//        }
//
//        //过滤变体**todo 未成功
////        variantFilter { variant ->
////            def names = variant.flavorDimensions*.name
////            // To check for a certain build type, use variant.buildType.name == "<buildType>"
////            if (names.contains("minApi21") && names.contains("demo")) {
////                // Gradle ignores any variants that satisfy the conditions above.
////                setIgnore(true)
////            }
////        }
//    }
//    productFlavors 多渠道打包
//    productFlavors {
//        kuan {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "kuan"]
//        }
//        xiaomi {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
//        }
//        qh360 {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qh360"]
//        }
//        baidu {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
//        }
//        wandoujia {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//        }
//    }

//    或者
//    productFlavors {
//        kuan {}
//        xiaomi {}
//        qh360 {}
//        baidu {}
//        wandoujia {}
//    }
//
//    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayout}"
    testImplementation "junit:junit:${rootProject.ext.junit}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':module_animation')
    implementation project(path: ':module_eventlibrary')
    implementation project(path: ':module_servicelibrary')
    implementation project(path: ':module_myview')
    implementation project(path: ':module_webview')
    implementation project(path: ':module_weex')
    implementation project(path: ':module_rxjava')
    implementation project(path: ':module_degger')
}